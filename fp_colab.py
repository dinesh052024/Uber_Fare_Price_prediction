# -*- coding: utf-8 -*-
"""Copy of FP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11G_tTUg07bIMVtms7AMhxDWPL1HhU6RM
"""

pip install mysql-connector-python -q

pip install boto3 -q

import boto3
ak='*********'
sk='************'
s3_client=boto3.client('s3',aws_access_key_id=ak,aws_secret_access_key=sk)

s3_client.list_buckets()

s3_client.list_objects_v2(Bucket='mdsfp007')

upload_file = '/content/sample_data/uber.csv'
s3_client.upload_file(upload_file, 'mdsfp007', 'uber.csv')

s3_client.download_file('mdsfp007', 'uber.csv', '/content/sample_data/uber.csv')

import pandas as pd
import numpy as np
import geopy.distance
from sklearn.preprocessing import LabelEncoder

data = pd.read_csv("/content/sample_data/uber.csv")
data.head()

data=data.drop(['Unnamed: 0'],axis=1)
data=data.drop(['key'],axis=1)

data['pickup_longitude']=data['pickup_longitude'].replace(0, np.nan)
data['pickup_latitude']=data['pickup_latitude'].replace(0, np.nan)
data['dropoff_latitude']=data['dropoff_latitude'].replace(0, np.nan)
data['dropoff_longitude']=data['dropoff_longitude'].replace(0, np.nan)
data['passenger_count']=data['passenger_count'].replace(0, np.nan)
data['passenger_count']=data['passenger_count'].replace(208, np.nan)

data.shape

data.isna().sum()

data.dropna(subset=['pickup_longitude'], inplace=True)

data.dropna(subset=['pickup_latitude'], inplace=True)

data.dropna(subset=['dropoff_longitude'], inplace=True)

data.dropna(subset=['dropoff_latitude'], inplace=True)

mode_val=data['passenger_count'].mode()[0]
data['passenger_count'].fillna(value=mode_val, inplace=True)

data.pickup_datetime   = pd.to_datetime(data.pickup_datetime)

data.info()

def car_type(value):
    if value > 0 and value < 3:
        return "mini"
    elif value > 2 and value < 5:
        return "xl"
    elif value >= 5:
        return "xuv"

data['car_type'] = data['passenger_count'].map(car_type)
data.head()

le = LabelEncoder()
data['car_type'] = le.fit_transform(data['car_type'])
data['car_type']

data['year']=data.pickup_datetime.dt.year
data['month']=data.pickup_datetime.dt.month
data['day']=data.pickup_datetime.dt.day
data['day_name']=data.pickup_datetime.dt.day_name()
data['week_of_year']=data.pickup_datetime.dt.isocalendar().week
data['time_hour']=data.pickup_datetime.dt.hour
data['time_min']=data.pickup_datetime.dt.minute
data['time_sec']=data.pickup_datetime.dt.second

data['Quarter']=data.pickup_datetime.dt.quarter

data['day_name'] = le.fit_transform(data['day_name'])
data['day_name']

data.head()



data.shape

data = data.drop(data[data['pickup_latitude'] > 90].index)
data = data.drop(data[data['pickup_latitude'] < -90].index)
data = data.drop(data[data['dropoff_latitude'] > 90].index)
data = data.drop(data[data['dropoff_latitude'] < -90].index)
data = data.drop(data[data['pickup_longitude'] > 180].index)
data = data.drop(data[data['pickup_longitude'] < -180].index)
data = data.drop(data[data['dropoff_longitude'] > 180].index)
data = data.drop(data[data['dropoff_longitude'] < -180].index)

distances = []
for i in range(len(data)):
    a = (data.pickup_latitude.iloc[i], data.pickup_longitude.iloc[i])
    b = (data.dropoff_latitude.iloc[i], data.dropoff_longitude.iloc[i])
    #print(a,b,c)
    c = geopy.distance.geodesic(a, b).km

    distances.append(c)


data['distance_km'] = distances

data['distance_km']=data['distance_km'].round(2)

data.info()

pip install mysql-connector-python -q

from sqlalchemy import create_engine
from sqlalchemy import text
import mysql.connector
connection_string = "mysql+mysqlconnector://admin:password@database-1.c1cqai22y76v.ap-south-1.rds.amazonaws.com:3306/FIPROJ"
engine = create_engine(connection_string, echo=True)

data.to_sql('UBER_DATA', con=engine, if_exists='append', index=False)

data.to_sql('UBER_DATA', con=engine, if_exists='append', index=False)

import pandas as pd

df = pd.read_sql_table('UBER_DATA', con=engine)
df.head()

df=df.drop(['pickup_datetime'],axis=1)

#analysed the distance more than 1k km and found the long,lat is ureal so dropping off theose records
df = df.drop(df[df['distance_km'] > 1000].index)
df.shape

import matplotlib.pyplot as plt
import numpy as np
import PIL.Image
import urllib.request

import seaborn as sns

plt.scatter(df['fare_amount'],df['distance_km'])
plt.show()

df[['fare_amount','distance_km','passenger_count','car_type','year']].hist(bins=5,figsize=(10,10))
plt.show()

plt.scatter(df['year'],df['passenger_count'])
plt.show()

df.info()

x=df[['passenger_count', 'car_type', 'year','month','day','day_name','week_of_year','time_hour','time_min','time_sec','Quarter','distance_km']].values
y=df['fare_amount'].values

x

y

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.2,random_state=0)



from sklearn.linear_model import LinearRegression
model=LinearRegression()
model.fit(x_train,y_train)

model.score(x_test,y_test)

from sklearn.neighbors import KNeighborsRegressor
model = KNeighborsRegressor(n_neighbors=2,weights='distance')
model.fit(x_train,y_train)

model.score(x_test,y_test)

from sklearn.tree import DecisionTreeClassifier

from sklearn.tree import DecisionTreeRegressor
from scipy.sparse import issparse
model=DecisionTreeRegressor()
model.fit(x_train,y_train)

model.score(x_test,y_test)

from sklearn.ensemble import GradientBoostingRegressor
model_gb=GradientBoostingRegressor()
model_gb.fit(x_train,y_train)

model.score(x_test,y_test)

from sklearn.ensemble import RandomForestRegressor
model_rf=RandomForestRegressor()
model_rf.fit(x_train,y_train)

model.score(x_test,y_test)

pip install xgboost -q

from xgboost import XGBRegressor
model = XGBRegressor()
model.fit(x_train, y_train)

model.score(x_test,y_test)

pip install catboost -q

from catboost import CatBoostRegressor
model = CatBoostRegressor()
model.fit(x_train, y_train)

model.score(x_test,y_test)

y_test

model.predict(x_test)

import pickle
pickle.dump(model,open('model.pkl','wb'))

plt.figure(figsize=[24,20])
sns.heatmap(df.corr(), annot=True, vmin=-1, vmax=1, center=0) #cmap='BuGn'
plt.show()

ax = df.plot.bar(x='fare_amount', y='distance_km', rot=0)



